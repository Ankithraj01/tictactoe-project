import tkinter as tk
from itertools import cycle
from tkinter import font
from typing import NamedTuple

class Player(NamedTuple):
    label: str
    color: str

class Move(NamedTuple):
    row: int
    col: int
    label: str = ""

BOARD_SIZE = 3
DEFAULT_PLAYERS = (Player(label="X", color="red"),Player(label="O", color="blue"),)

class TicTacToeGame:
    def __init__(lf, players=DEFAULT_PLAYERS, board_size=BOARD_SIZE):
        lf._players = cycle(players)
        lf.board_size = board_size
        lf.current_player = next(lf._players)
        lf.winner_combo = []
        lf._current_moves = []
        lf._has_winner = False
        lf._winning_combos = []
        lf._setup_board()

    def _setup_board(lf):
        lf._current_moves = [
            [Move(row, col) for col in range(lf.board_size)]
            for row in range(lf.board_size)
        ]
        lf._winning_combos = lf._get_winning_combos()

    def _get_winning_combos(lf):
        rows = [
            [(move.row, move.col) for move in row]
            for row in lf._current_moves
        ]
        columns = [list(col) for col in zip(*rows)]
        first_diagonal = [row[i] for i, row in enumerate(rows)]
        second_diagonal = [col[j] for j, col in enumerate(reversed(columns))]
        return rows + columns + [first_diagonal, second_diagonal]

    def toggle_player(lf):
        lf.current_player = next(lf._players)

    def is_valid_move(lf, move):
        row, col = move.row, move.col
        move_was_not_played = lf._current_moves[row][col].label == ""
        no_winner = not lf._has_winner
        return no_winner and move_was_not_played

    def process_move(lf, move):
        row, col = move.row, move.col
        lf._current_moves[row][col] = move
        for combo in lf._winning_combos:
            results = set(lf._current_moves[n][m].label for n, m in combo)
            is_win = (len(results) == 1) and ("" not in results)
            if is_win:
                lf._has_winner = True
                lf.winner_combo = combo
                break

    def has_winner(lf):
        return lf._has_winner

    def is_tied(lf):
        no_winner = not lf._has_winner
        played_moves = (move.label for row in lf._current_moves for move in row)
        return no_winner and all(played_moves)

class TicTacToeBoard(tk.Tk):
    def __init__(lf, game):
        super().__init__()
        lf.title("Tic-Tac-Toe Game")
        lf._cells = {}
        lf._game = game
        lf._create_menu()
        lf._create_board_display()
        lf._create_board_grid()

    def _create_menu(lf):
        menu_bar = tk.Menu(master=lf)
        lf.config(menu=menu_bar)
        file_menu = tk.Menu(master=menu_bar)
        file_menu.add_command(label="Play Again", command=lf.reset_board)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=quit)
        menu_bar.add_cascade(label="File", menu=file_menu)

    def _create_board_display(lf):
        display_frame = tk.Frame(master=lf)
        display_frame.pack(fill=tk.X)
        lf.display = tk.Label(master=display_frame,text="Ready?",font=font.Font(size=28, weight="bold"),)
        lf.display.pack()

    def _create_board_grid(lf):
        grid_frame = tk.Frame(master=lf)
        grid_frame.pack()
        for row in range(lf._game.board_size):
            lf.rowconfigure(row, weight=1, minsize=50)
            lf.columnconfigure(row, weight=1, minsize=75)
            for col in range(lf._game.board_size):
                button = tk.Button(master=grid_frame,text="",font=font.Font(size=36, weight="bold"),fg="black",width=3,height=2,highlightbackground="lightblue",)
                lf._cells[button] = (row, col)
                button.bind("<ButtonPress-1>", lf.play)
                button.grid(row=row, column=col, padx=5, pady=5)

    def play(lf, event):
        clicked_btn = event.widget
        row, col = lf._cells[clicked_btn]
        move = Move(row, col, lf._game.current_player.label)
        if lf._game.is_valid_move(move):
            lf._update_button(clicked_btn)
            lf._game.process_move(move)
            if lf._game.is_tied():
                lf._update_display(msg="Tied game!", color="black")
            elif lf._game.has_winner():
                lf._highlight_cells()
                msg = f'Player "{lf._game.current_player.label}" won!'
                color = lf._game.current_player.color
                lf._update_display(msg, color)
            else:
                lf._game.toggle_player()
                msg = f"{lf._game.current_player.label}'s turn"
                lf._update_display(msg)

    def _update_button(lf, clicked_btn):
        clicked_btn.config(text=lf._game.current_player.label)
        clicked_btn.config(fg=lf._game.current_player.color)

    def _update_display(lf, msg, color="black"):
        lf.display["text"] = msg
        lf.display["fg"] = color

    def _highlight_cells(lf):
        for button, coordinates in lf._cells.items():
            if coordinates in lf._game.winner_combo:
                button.config(highlightbackground="red")

    def reset_board(lf):
        lf._game.reset_game()
        lf._update_display(msg="Ready?")
        for button in lf._cells.keys():
            button.config(highlightbackground="lightblue")
            button.config(text="")
            button.config(fg="black")

def main():
    game = TicTacToeGame()
    board = TicTacToeBoard(game)
    board.mainloop()

if __name__ == "__main__":
    main()
